# Costify REST API - HTTP Client Requests
# Compatible with IntelliJ IDEA, VS Code REST Client, and other HTTP clients
# Base URL: http://localhost:8080

### Variables
@baseUrl = http://localhost:8080
@contentType = application/json

### =============================================================================
### INGREDIENTS API
### =============================================================================

### Register Condensed Milk Ingredient
POST {{baseUrl}}/api/v1/ingredients
Content-Type: {{contentType}}

{
  "name": "Condensed Milk",
  "packageQuantity": 395.0,
  "packagePrice": 7.99,
  "packageUnit": "G"
}

### Register Milk Cream Ingredient
POST {{baseUrl}}/api/v1/ingredients
Content-Type: {{contentType}}

{
  "name": "Milk Cream",
  "packageQuantity": 200,
  "packagePrice": 5.0,
  "packageUnit": "G"
}

### Register Straberry Juice Ingredient
POST {{baseUrl}}/api/v1/ingredients
Content-Type: {{contentType}}

{
  "name": "Straberry Juice",
  "packageQuantity": 1,
  "packagePrice": 1,
  "packageUnit": "UN"
}

### Register Vanilla Extract Ingredient (TBSP for liquids)
POST {{baseUrl}}/api/v1/ingredients
Content-Type: {{contentType}}

{
  "name": "Vanilla Extract",
  "packageQuantity": 10.0,
  "packagePrice": 8.50,
  "packageUnit": "TBSP"
}

### Register Butter Ingredient (TBSP_BUTTER for solid fats)
POST {{baseUrl}}/api/v1/ingredients
Content-Type: {{contentType}}

{
  "name": "Butter",
  "packageQuantity": 30.0,
  "packagePrice": 12.00,
  "packageUnit": "TBSP_BUTTER"
}

### =============================================================================
### RECIPES API  
### =============================================================================

### Register Simple Bread Recipe
# NOTE: Replace ingredientId values with actual UUIDs from ingredient registration responses
POST {{baseUrl}}/api/v1/recipes
Content-Type: {{contentType}}

{
  "name": "Simple Mousse",
  "ingredients": [
    {
      "ingredientId": "3fc86365-7e2e-457a-94b8-a407587a30cc",
      "quantity": 395.0,
      "unit": "G"
    },
    {
      "ingredientId": "d2c59ddf-b5df-4ea2-a8c0-53bcc219998a",
      "quantity": 200.0,
      "unit": "G"
    },
    {
      "ingredientId": "89a6256f-c4d8-4abe-9501-73dca99ffab8",
      "quantity": 2,
      "unit": "UN"
    }
  ]
}

### Register Cake Recipe
# NOTE: Replace ingredientId values with actual UUIDs from ingredient registration responses
POST {{baseUrl}}/api/v1/recipes
Content-Type: {{contentType}}

{
  "name": "Vanilla Cake",
  "ingredients": [
    {
      "ingredientId": "550e8400-e29b-41d4-a716-446655440000",
      "quantity": 0.3,
      "unit": "KG"
    },
    {
      "ingredientId": "880e8400-e29b-41d4-a716-446655440003",
      "quantity": 0.2,
      "unit": "KG"
    },
    {
      "ingredientId": "990e8400-e29b-41d4-a716-446655440004",
      "quantity": 250.0,
      "unit": "ML"
    },
    {
      "ingredientId": "aa0e8400-e29b-41d4-a716-446655440005",
      "quantity": 2.0,
      "unit": "UN"
    }
  ]
}

### =============================================================================
### VALIDATION EXAMPLES (These should fail with proper error messages)
### =============================================================================

### Invalid Ingredient - Missing Name
POST {{baseUrl}}/api/v1/ingredients
Content-Type: {{contentType}}

{
  "packageQuantity": 1.0,
  "packagePrice": 2.50,
  "packageUnit": "KG"
}

### Invalid Ingredient - Negative Price
POST {{baseUrl}}/api/v1/ingredients
Content-Type: {{contentType}}

{
  "name": "Invalid Ingredient",
  "packageQuantity": 1.0,
  "packagePrice": -1.0,
  "packageUnit": "KG"
}

### Invalid Recipe - Empty Ingredients
POST {{baseUrl}}/api/v1/recipes
Content-Type: {{contentType}}

{
  "name": "Empty Recipe",
  "ingredients": []
}

### Invalid Recipe - Invalid Unit
POST {{baseUrl}}/api/v1/recipes
Content-Type: {{contentType}}

{
  "name": "Invalid Recipe",
  "ingredients": [
    {
      "ingredientId": "550e8400-e29b-41d4-a716-446655440000",
      "quantity": 0.5,
      "unit": "INVALID_UNIT"
    }
  ]
}

### =============================================================================
### TESTING WORKFLOW
### =============================================================================
# 
# 1. Start the application: ./mvnw spring-boot:run
# 2. Register ingredients first (copy the 'id' from responses)
# 3. Update recipe requests with actual ingredient IDs
# 4. Register recipes using the ingredient IDs
# 5. Test validation by running the invalid examples
#
# Expected ingredient IDs format: UUID v4 (e.g., 550e8400-e29b-41d4-a716-446655440000)
#
### =============================================================================